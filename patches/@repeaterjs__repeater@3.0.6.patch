diff --git a/cjs/repeater.d.ts b/cjs/repeater.d.ts
index 4c4797783a36b866d36a1c63e48a612c1802ca61..22e0f8f3fed5728d4805b71dc74c8a6c7de8f9f6 100644
--- a/cjs/repeater.d.ts
+++ b/cjs/repeater.d.ts
@@ -48,7 +48,7 @@ export declare type Stop = ((err?: unknown) => undefined) & Promise<undefined>;
 /** The type of the callback passed to the Repeater constructor. */
 export declare type RepeaterExecutor<T, TReturn = any, TNext = unknown> = (push: Push<T, TNext>, stop: Stop) => PromiseLike<TReturn> | TReturn;
 /** The maximum number of push or next operations which may exist on a single repeater. */
-export declare const MAX_QUEUE_LENGTH = 1024;
+export declare const MAX_QUEUE_LENGTH = 8192;
 export declare class Repeater<T, TReturn = any, TNext = unknown> {
     constructor(executor: RepeaterExecutor<T, TReturn, TNext>, buffer?: RepeaterBuffer | undefined);
     next(value?: PromiseLike<TNext> | TNext): Promise<IteratorResult<T, TReturn>>;
diff --git a/cjs/repeater.js b/cjs/repeater.js
index 53dac7a6c3520862fed6e4fa1ff222bed0dd9cc9..cf710b167bfb71f82d4bfcab46897a64746a8544 100644
--- a/cjs/repeater.js
+++ b/cjs/repeater.js
@@ -251,7 +251,7 @@ var Done = 3;
 /** Repeaters advance to this state if an error is thrown into the repeater. */
 var Rejected = 4;
 /** The maximum number of push or next operations which may exist on a single repeater. */
-var MAX_QUEUE_LENGTH = 1024;
+var MAX_QUEUE_LENGTH = 8192;
 var NOOP = function () { };
 /** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */
 function consumeExecution(r) {
diff --git a/repeater.d.ts b/repeater.d.ts
index 4c4797783a36b866d36a1c63e48a612c1802ca61..22e0f8f3fed5728d4805b71dc74c8a6c7de8f9f6 100644
--- a/repeater.d.ts
+++ b/repeater.d.ts
@@ -48,7 +48,7 @@ export declare type Stop = ((err?: unknown) => undefined) & Promise<undefined>;
 /** The type of the callback passed to the Repeater constructor. */
 export declare type RepeaterExecutor<T, TReturn = any, TNext = unknown> = (push: Push<T, TNext>, stop: Stop) => PromiseLike<TReturn> | TReturn;
 /** The maximum number of push or next operations which may exist on a single repeater. */
-export declare const MAX_QUEUE_LENGTH = 1024;
+export declare const MAX_QUEUE_LENGTH = 8192;
 export declare class Repeater<T, TReturn = any, TNext = unknown> {
     constructor(executor: RepeaterExecutor<T, TReturn, TNext>, buffer?: RepeaterBuffer | undefined);
     next(value?: PromiseLike<TNext> | TNext): Promise<IteratorResult<T, TReturn>>;
diff --git a/repeater.js b/repeater.js
index bdf26e5a183047d4bb2b6968d73c1d1ce6b78dcc..e760cf1d3b5f1fc012ca6c8e0b25c8c6ba34fc75 100644
--- a/repeater.js
+++ b/repeater.js
@@ -248,7 +248,7 @@ var Done = 3;
 /** Repeaters advance to this state if an error is thrown into the repeater. */
 var Rejected = 4;
 /** The maximum number of push or next operations which may exist on a single repeater. */
-var MAX_QUEUE_LENGTH = 1024;
+var MAX_QUEUE_LENGTH = 8192;
 var NOOP = function () { };
 /** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */
 function consumeExecution(r) {
