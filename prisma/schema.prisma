generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "jsonProtocol"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Image {
  id          String   @id
  name        String
  size        Int
  format      String
  width       Int
  height      Int
  path        String
  sizes       Int[]
  hash        String
  color       String
  placeholder String
  createdAt   DateTime @default(now()) @map("created_at")

  avatarProfile Profile[]

  @@map("images")
}

model Profile {
  id        String       @id
  userId    String       @map("user_id")
  user      User         @relation(fields: [userId], references: [id])
  name      String
  handle    String
  state     ProfileState
  order     Int
  avatarId  String?      @map("avatar_id")
  avatar    Image?       @relation(fields: [avatarId], references: [id])
  createdAt DateTime     @default(now()) @map("created_at")

  sessions Session[]
  spaces   SpaceMember[]

  @@index([handle])
  @@map("profiles")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  profileId String   @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model Space {
  id        String     @id
  slug      String
  name      String
  state     SpaceState
  createdAt DateTime   @default(now()) @map("created_at")

  members SpaceMember[]

  @@index([slug])
  @@map("spaces")
}

model SpaceMember {
  id        String          @id
  spaceId   String          @map("space_id")
  space     Space           @relation(fields: [spaceId], references: [id])
  profileId String          @map("profile_id")
  profile   Profile         @relation(fields: [profileId], references: [id])
  role      SpaceMemberRole
  createdAt DateTime        @default(now()) @map("created_at")

  @@unique([spaceId, profileId])
  @@map("space_members")
}

model User {
  id        String    @id
  email     String    @unique
  password  String?
  state     UserState
  createdAt DateTime  @default(now()) @map("created_at")

  profiles Profile[]
  sessions Session[]

  @@map("users")
}

enum ProfileState {
  ACTIVE
  INACTIVE
}

enum SpaceState {
  ACTIVE
  INACTIVE
}

enum UserState {
  ACTIVE
  INACTIVE
}

enum SpaceMemberRole {
  OWNER
  MEMBER
}
